name: Deploy to AWS EC2

on:
  pull_request_target:           # pull_request_target 이벤트는 'base' repo에만 secrets를 전달합니다
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true  # PR이 머지된 경우에만 실행
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ GitHub 레포지토리 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3️⃣ Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and Push Docker Image
        run: |
          # ─────────────────────────────────────────────────────────────────────────────
          # linux/amd64 플랫폼으로 이미지 빌드 & latest 태그 푸시
          # ─────────────────────────────────────────────────────────────────────────────
          docker build --platform linux/amd64 \
            --build-arg DEBUG=${{ secrets.DEBUG }} \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --build-arg DJANGO_DEPLOY=${{ secrets.DJANGO_DEPLOY }} \
            --build-arg DB_ENGINE=${{ secrets.DB_ENGINE }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME }} \
            --build-arg DB_USER=${{ secrets.DB_USER }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT }} \
            --build-arg SMS_TOKEN_KEY=${{ secrets.SMS_TOKEN_KEY }} \
            --build-arg SMS_API_KEY=${{ secrets.SMS_API_KEY }} \
            --build-arg SEND_PHONE=${{ secrets.SEND_PHONE }} \
            --build-arg SSODAA_BASE_URL=${{ secrets.SSODAA_BASE_URL }} \
            --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} \
            -t ${{ secrets.DOCKER_USERNAME }}/linenow:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/linenow:latest

      # 4️⃣ EC2 서버에 SSH 접속 후 Blue‑Green 무중단 배포
      - name: Deploy Blue-Green to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # 에러 발생 시 즉시 중단
            # ──────────────────────────────────────────────────────────
            # 1) 현재 Active 포트 확인 (upstream.conf에서)
            # ──────────────────────────────────────────────────────────
            ACTIVE_PORT=$(sudo grep -Po '127\.0\.0\.1:\K\d+' /etc/nginx/sites-available/default)
            if [ "$ACTIVE_PORT" = "8000" ]; then
              INACTIVE_PORT=8001
              INACTIVE_NAME=linenow_green
              ACTIVE_NAME=linenow_blue
            else
              INACTIVE_PORT=8000
              INACTIVE_NAME=linenow_blue
              ACTIVE_NAME=linenow_green
            fi
            echo "▶ Active: $ACTIVE_PORT($ACTIVE_NAME), Deploying new: $INACTIVE_PORT($INACTIVE_NAME)"

            # ──────────────────────────────────────────────────────────
          
            echo "기존 media 파일 외부로 복사"

            # 컨테이너 내에 /media 디렉토리가 있는지 검사
            if docker exec "$ACTIVE_NAME" test -d /media; then
              echo "media 폴더가 존재합니다. 복사 중..."
              docker cp "$ACTIVE_NAME":/media /home/ubuntu
            else
              echo "컨테이너 내에 media 폴더가 존재하지 않습니다."
            fi

            # ──────────────────────────────────────────────────────────
            # 2) 이전에 대기 중이던 컨테이너 제거
            # ──────────────────────────────────────────────────────────
            echo "🔄 기존 컨테이너 중지 및 삭제..."
            docker rm -f "$INACTIVE_NAME" || true

            # ──────────────────────────────────────────────────────────
            # 3) 최신 이미지 Pull & 새 컨테이너 실행
            # ──────────────────────────────────────────────────────────
            echo "⬇️ Pull latest image"
            docker pull ${{ secrets.DOCKER_USERNAME }}/linenow:latest

            echo "🚀 Run new container ($INACTIVE_NAME) on port $INACTIVE_PORT"
            docker run -d \
              --name $INACTIVE_NAME \
              --network linenow-network \
              -p ${INACTIVE_PORT}:${INACTIVE_PORT} \
              -e REDIS_HOST=redis-server \
              -e PORT=${INACTIVE_PORT} \
              ${{ secrets.DOCKER_USERNAME }}/linenow:latest

            # media 파일을 컨테이너 내부로 복사
            echo "ubuntu/media 폴더를 컨테이너 내부로 복사 중..."
            if [ -d /home/ubuntu/media ]; then
              echo "media 폴더가 존재합니다. 컨테이너 내부로 복사 중..."
              docker cp /home/ubuntu/media "$ACTIVE_NAME":/
            else
              echo "외부에 media 폴더가 존재하지 않습니다."
            fi

            # ──────────────────────────────────────────────────────────
            # 4) DB 마이그레이션
            # ──────────────────────────────────────────────────────────
            echo "🛠 Run migrations"
            docker exec $INACTIVE_NAME python manage.py migrate


            # ──────────────────────────────────────────────────────────
            # 5) Nginx upstream 포트 교체 & reload
            # ──────────────────────────────────────────────────────────
            echo "🔄 Switching Nginx to port $INACTIVE_PORT"
            sudo sed -i "s/127.0.0.1:${ACTIVE_PORT}/127.0.0.1:${INACTIVE_PORT}/" /etc/nginx/sites-available/default
            sudo nginx -t
            sudo systemctl reload nginx

            # ──────────────────────────────────────────────────────────
            # 6) 기존 Active 컨테이너 삭제
            # ──────────────────────────────────────────────────────────
            echo "🗑️ Removing old container $ACTIVE_NAME"
            docker rm -f "$ACTIVE_NAME" || true

            echo "🧹 불필요한 Docker 이미지 정리..."
            docker image prune -a -f

            echo "✅ Blue‑Green 배포 완료! New live: $INACTIVE_NAME on $INACTIVE_PORT"